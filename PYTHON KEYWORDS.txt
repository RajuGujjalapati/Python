and	::A logical operator
as	::To create an alias
assert	::For debugging
break	:To break out of a loop
class	::To define a class
continue::	To continue to the next iteration of a loop
def	::To define a function
del	::To delete an object
elif	::Used in conditional statements, same as else if
else	::Used in conditional statements
except	::Used with exceptions, what to do when an exception occurs
False	::Boolean value, result of comparison operations
finally	::Used with exceptions, a block of code that will be executed no matter if there is an exception or not
for	::To create a for loop
from	::To import specific parts of a module
global	::To declare a global variable
if	::To make a conditional statement
import	::To import a module
in	::To check if a value is present in a list, tuple, etc.
is	::To test if two variables are equal
lambda	::To create an anonymous function
None	::Represents a null value
nonlocal::	To declare a non-local variable
not	::A logical operator
or	::A logical operator
pass	::A null statement, a statement that will do nothing
raise	::To raise an exception
return	::To exit a function and return a value
True	::Boolean value, result of comparison operations
try	::To make a try...except statement
while	::To create a while loop
with	::Used to simplify exception handling
yield	::To end a function, returns a generator
seed()	Initialize the random number generator
getstate()::	Returns the current internal state of the random number generator
setstate()::	Restores the internal state of the random number generator
getrandbits()::	Returns a number representing the random bits
randrange()	::Returns a random number between the given range
randint()	::Returns a random number between the given range
choice()::	Returns a random element from the given sequence
choices()::	Returns a list with a random selection from the given sequence
shuffle()::	Takes a sequence and returns the sequence in a random order
sample()::	Returns a given sample of a sequence
random()::	Returns a random float number between 0 and 1
uniform()::	Returns a random float number between two given parameters
triangular()::	Returns a random float number between two given parameters, you can also set a mode parameter to specify the midpoint between the two other parameters
betavariate()::	Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics)
expovariate()	::Returns a random float number between 0 and 1, or between 0 and -1 if the parameter is negative, based on the Exponential distribution (used in statistics)
gammavariate()	::Returns a random float number between 0 and 1 based on the Gamma distribution (used in statistics)
gauss()	::Returns a random float number between 0 and 1 based on the Gaussian distribution (used in probability theories)
lognormvariate()::	Returns a random float number between 0 and 1 based on a log-normal distribution (used in probability theories)
normalvariate()	::Returns a random float number between 0 and 1 based on the normal distribution (used in probability theories)
vonmisesvariate()::	Returns a random float number between 0 and 1 based on the von Mises distribution (used in directional statistics)
paretovariate()	::Returns a random float number between 0 and 1 based on the Pareto distribution (used in probability theories)
weibullvariate()::	Returns a random float number between 0 and 1 based on the Weibull distribution (used in statistics)
